前端 (Frontend): 负责用户交互和界面展示。
职责:
构建所有用户可见的页面，如首页、景点列表页、路线详情页等 。
实现响应式布局，确保在手机、平板和电脑上都有良好的视觉和操作体验 。
处理用户的基本操作，如点击、搜索、筛选等，并向后端发送请求 。

后端 (Backend): 负责处理业务逻辑，但数据源不再是数据库，而是本地文件。
职责:
编写接口，用于读取本地文件（如 attractions.json, routes.json）中的数据，然后返回给前端。
实现业务逻辑。例如，当收到“关键词串联”的请求时 ，后端会加载所有景点数据文件，在程序内存中进行筛选和逻辑组合，最后生成一条新路线。
处理数据写入。例如，当用户使用“红色记忆”互动功能提交感想时 ，后端将新内容追加写入到某个指定的文件中。

数据存储 (Data Storage - 文件系统): 使用结构化的文本文件（推荐 JSON）来代替数据库。
职责:
景点数据文件 (attractions.json): 一个 JSON 文件，以数组形式存储所有景点信息，每个景点是一个对象，包含名称、介绍、图片、位置等字段 。
路线数据文件 (routes.json): 另一个 JSON 文件，存储所有预设的路线信息，包括路线名称、包含的景点ID列表、主题等 。
用户数据文件 (users.json): 用于存储用户信息，例如用户的收藏、发布的感想等。

这种方案的工作流程示例 (以筛选景点为例):
用户在前端的“景点列表页”上，按“黄浦区”进行筛选 。
前端向后端发送一个请求，例如 GET /api/attractions?area=huangpu。
后端接收到请求，打开并读取服务器上 attractions.json 文件的全部内容。
在程序内存中，后端遍历所有景点数据，筛选出其中区域字段为“黄浦区”的景点。
后端将筛选后的结果打包成 JSON 格式，返回给前端。
前端收到数据，将其渲染成图文卡片列表展示给用户 。
主要的局限性：
性能问题: 当数据量（例如景点数量）非常大时，每次请求都需要读取和解析整个文件，会非常缓慢。
复杂查询困难: 实现像智能推荐 或多维度个性化定制 这样的复杂查询会变得非常低效和困难，因为无法利用数据库的索引和高效查询能力。
并发问题: 如果有多个用户同时尝试写入数据（例如同时发表感想），很容易导致文件损坏或数据覆盖丢失。
可扩展性差: 这种架构不适合数据频繁更新和用户量大的应用。

前端: Vue.js
后端: Python
数据存储: JSON 文件
