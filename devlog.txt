### **开发日志 (Development Log)**

**项目:** "红色印记：上海红色文旅双语导览平台"
**日期:** 2025年10月16日
**阶段:** 项目初始化与基本框架搭建

*   **[分析] 需求与架构分析:**
    *   阅读并理解了 `struct.txt` (技术架构)，明确了采用 `Vue.js` (前端) + `Python` (后端) + `JSON文件` (数据存储) 的技术路线。
    *   阅读并理解了 `task.txt` (项目需求)，明确了项目的功能目标，如智能推荐、关键词串联、双语支持等。

*   **[执行] 后端框架搭建:**
    *   创建了 `backend/data` 目录结构。
    *   创建了 `backend/requirements.txt` 并添加了 `Flask` 和 `Flask-Cors` 依赖。
    *   创建了 `backend/main.py`，并初始化了一个基础的、支持跨域 (CORS) 的 Flask Web 服务。
    *   在 `backend/data/` 目录下创建了 `attractions.json`, `routes.json`, `users.json` 三个空的JSON文件作为初始数据源。

*   **[执行] 前端框架搭建:**
    *   创建了 `frontend/src` 目录结构。
    *   创建了 `frontend/package.json`，配置了 `Vite` 作为构建工具，并添加了 `vue` 依赖。
    *   创建了前端入口页面 `frontend/index.html` 和 Vue 初始化脚本 `frontend/src/main.js`。
    *   创建了 Vue 的根组件 `frontend/src/App.vue`。

*   **[修复] 前端启动问题:**
    *   **问题:** `npm run dev` 启动时，Vite 报错 `Failed to parse source for import analysis`，无法处理 `.vue` 文件。
    *   **原因:** 忘记创建 Vite 配置文件来启用 Vue 插件。
    *   **解决:** 创建并配置了 `frontend/vite.config.js` 文件，在其中引入并使用了 `@vitejs/plugin-vue` 插件，问题解决。

*   **[执行] 实现景点列表功能 (端到端):**
    *   **数据:** 向 `backend/data/attractions.json` 添加了示例数据。
    *   **后端:** 在 `backend/main.py` 中创建了 `/api/attractions` API 接口，用于读取并返回景点数据。
    *   **前端:** 修改了 `frontend/src/App.vue`，实现了从后端获取数据、处理加载/错误状态，并使用 `v-for` 将景点列表渲染到页面上。
    *   **结果:** 成功打通前后端，实现了第一个核心功能的垂直切片。

*   **[执行] 集成 Vue Router 并重构前端结构:**
    *   **安装:** 在 `frontend` 目录中安装了 `vue-router`。
    *   **结构:** 创建了 `src/views` 和 `src/router` 目录。
    *   **页面:** 创建了6个核心页面的组件文件（`HomePage`, `AttractionListPage` 等）。
    *   **迁移:** 将景点列表的获取和显示逻辑从 `App.vue` 迁移到了 `views/AttractionListPage.vue`。
    *   **配置:** 创建了 `router/index.js` 配置文件，定义了所有页面的路由。
    *   **集成:** 修改了 `main.js` 以启用 `vue-router`。
    *   **布局:** 重构了 `App.vue`，使其成为包含全局导航栏和 `<router-view>` 的主布局文件。
    *   **结果:** 应用现在是单页应用（SPA），具备了多页面导航能力。

*   **[执行] 前端界面美化 (Apple Design):**
    *   **全局样式 (`App.vue`):**
        *   引入了类似 Apple Design 的设计系统变量（颜色、字体、圆角、阴影）。
        *   导航栏采用白色背景、底部边框和柔和阴影，提升了层次感。
        *   优化了导航链接的字体、颜色和激活状态，使其更清晰、更精致。
        *   更新了全局背景色和字体，提升了整体的视觉清晰度。
    *   **景点列表页 (`AttractionListPage.vue`):**
        *   重新设计了景点卡片，应用了更大的圆角 (`16px`) 和更柔和、更具层次感的阴影。
        *   增加了卡片的鼠标悬浮（hover）动效，提升了交互感。
        *   优化了卡片内部的文字排版和间距，使内容更易读。
        *   为“地区”标签添加了独立的样式，使其成为一个标签元素。

*   **[执行] 完成景点详情功能闭环:**
    *   **前端 (列表页):** 修改了 `AttractionListPage.vue`，使用 `<router-link>` 将每个景点卡片转换为指向详情页的动态链接。
    *   **后端 (API):** 在 `main.py` 中新增了 `/api/attractions/<int:attraction_id>` 接口，用于根据ID查找并返回单个景点的数据。
    *   **前端 (详情页):** 完整实现了 `AttractionDetailPage.vue`。该页面能从URL中获取ID，调用后端接口获取数据，并以符合设计风格的布局展示景点名称、标签、中英文介绍等详细信息。添加了“返回列表”按钮。
    *   **结果:** 成功完成了“浏览列表 -> 点击 -> 查看详情”的核心用户流程。

*   **[执行] 实现景点列表的搜索与筛选功能:**
    *   **前端 (UI):** 在 `AttractionListPage.vue` 中添加了用于关键词搜索的输入框，以及按“区域”和“主题”筛选的下拉菜单。
    *   **前端 (逻辑):** 重构了数据获取逻辑，现在可以根据用户输入构建查询URL（如 `?keyword=...&area=...`）并向后端请求数据。
    *   **后端 (API):** 升级了 `/api/attractions` 接口，使其能够解析URL查询参数，并根据参数（`keyword`, `area`, `theme`）对景点数据进行动态筛选，最后返回筛选后的结果。
    *   **结果:** “景点列表页”的核心交互功能已完成，用户可以方便地查找特定景点。

*   **[执行] 完成“路线”功能模块开发:**
    *   **数据:** 向 `routes.json` 文件添加了包含景点ID关联的示例路线数据。
    *   **后端 (API):** 在 `main.py` 中新增了 `/api/routes` 和 `/api/routes/<id>` 两个接口。详情接口会返回包含完整景点信息的“富集”数据。
    *   **前端 (列表页):** 实现了 `RouteListPage.vue`，用于获取并展示所有预设路线的列表。
    *   **前端 (详情页):** 实现了 `RouteDetailPage.vue`，用于展示单条路线的详细信息，并列出其中包含的所有景点（可点击跳转）。
    *   **结果:** 成功完成了“浏览路线 -> 点击 -> 查看路线详情（含景点列表）”的核心用户流程，应用内容得到扩充。

---
**日期:** 2025年10月29日
**阶段:** 国际化改造（二）个性化与上传文案补齐

*   **[新增] i18n 词典键补充:**
    *   `frontend/src/locales/zh-CN.json`：新增 `common.uploading`、`messages.uploadFailed`，补充 `personalization` 下的生成状态、按钮、提示与里程显示键；新增 `upload` 命名空间（`noImage`、`selectAndUpload`、`saveAttractionHint`）。
    *   `frontend/src/locales/en-US.json`：与中文保持同步，新增对应键与 `upload` 命名空间。

*   **[改造] 个性化页面文案国际化:**
    *   文件：`frontend/src/views/PersonalizationPage.vue`
    *   变更：将“正在生成…/生成我的专属路线/请至少选择两个…”等硬编码中文替换为 `personalization.*` 键；“推荐路线顺序/总里程约/距离上一个点≈X公里”改为参数化 i18n；列表卡片区域显示改为 `$t('areas.${attraction.area}')`。

*   **[改造] 上传与富文本组件国际化:**
    *   文件：`frontend/src/components/SingleImageUpload.vue`
        *   模板：将“无图片/上传中…/选择并上传图片/请先保存景点…”替换为 `upload.*` 与 `common.uploading` 键。
        *   逻辑：引入 `useI18n`，上传失败错误信息使用 `t('messages.uploadFailed', { error })`。
    *   文件：`frontend/src/components/RichTextEditor.vue`
        *   逻辑：引入 `useI18n`，当响应非 200 时以及 `catch` 中的提示统一为 `messages.uploadFailed`。

*   **[验证] 预览检查:**
    *   打开前端预览，首页、个性化页面、上传组件及富文本图片上传的相关文案均正常显示；浏览器无报错，建议终端同步检查是否有新错误输出。

*   **[范围声明]**
    *   本次改动未触及 `AttractionDetailPage.vue` 与 `RouteDetailPage.vue`（维持此前约定）。

---
**日期:** 2025年10月29日 (续)
**阶段:** 国际化改造（三）首页轮播兜底文案抽离

*   **[改造] 首页动态副标题兜底文案:**
    *   文件：`frontend/src/views/HomePage.vue`
    *   变更：引入 `useI18n`，`dynamicSubtitle` 逻辑改为在无轮播图或当前景点 `description` 为空时使用 `t('home.subtitle')` 作为兜底文案，避免中文硬编码。

*   **[验证] 预览检查:**
    *   打开前端预览，首页在无描述或无轮播图时正确显示 i18n 兜底副标题；浏览器无错误。

---
**日期:** 2025年10月29日 (续2)
**阶段:** 首页主题卡片与代码表统一

*   **[重构] 主题卡片来源统一:**
    *   文件：`frontend/src/views/HomePage.vue`
    *   变更：移除静态 `interestTags` 数组，新增本地 `THEME_ICONS` 映射；使用 `THEME_KEYS` 生成 `interestTags`（`[{ code, icon }]`），实现卡片列表由代码表驱动，避免重复维护。

*   **[验证] 预览检查:**
    *   首页主题卡片按 `THEME_KEYS` 渲染，图标正常显示；浏览器无错误。

---

**日期:** 2025年10月16日 (续)
**阶段:** 核心功能增强与架构重构

*   **[重构] 数据存储结构升级:**
    *   **动机:** 为了支持更丰富的景点内容（如多张图片），将原有的单一 `attractions.json` 文件废弃。
    *   **方案:** 每个景点现在拥有一个独立的文件夹（以英文缩写命名），其中包含 `data.json` 文件和相关的图片资源。
    *   **执行:** 创建了 `backend/data/attractions` 目录，并为现有景点数据创建了对应的子目录和文件，旧的 `attractions.json` 已被删除。

*   **[执行] 实现图文混排功能:**
    *   **后端:** 重写了后端API，使其能够从新的目录结构中读取数据，并配置了静态文件服务以提供图片。
    *   **前端 (列表页):** `AttractionListPage.vue` 已更新，现在每个景点卡片都会显示一张封面图片。
    *   **前端 (详情页):** `AttractionDetailPage.vue` 已更新，添加了顶部的“英雄图”(Hero Image)。
    *   **前端 (富文本):**
        *   为前端项目安装了 `marked` 库，用于解析Markdown文本。
        *   将景点的 `description` 字段升级为Markdown格式，允许在文本中嵌入图片。
        *   `AttractionDetailPage.vue` 现在使用 `v-html` 指令渲染由 `marked` 解析后的HTML，实现了图文混排的介绍详情。

*   **[修复] 后端 500 错误:**
    *   **问题:** 在实现图文混排后，访问API时出现 "500 Internal Server Error"，错误信息为 "invalid group reference"。
    *   **原因:** 在 `main.py` 中，用于处理Markdown图片路径的正则表达式 `re.sub` 调用存在语法缺陷，导致服务器在处理数据时崩溃。
    *   **解决:** 重写了 `re.sub` 的替换逻辑，使用更安全的回调函数模式代替了有问题的f-string格式化，彻底解决了该bug。

*   **[重构] 后端模块化:**
    *   **动机:** `main.py` 文件变得过于庞大和复杂，不利于维护。
    *   **方案:** 采用Flask蓝图 (Blueprints) 和应用工厂 (Application Factory) 模式进行重构。
    *   **执行:**
        *   创建了 `backend/app` 包，其中包含 `data_loader.py` (数据逻辑), `attractions_bp.py` (景点API), 和 `routes_bp.py` (路线API)。
        *   在 `app/__init__.py` 中创建了 `create_app` 工厂函数，用于组装应用。
        *   使用新的 `run.py` 作为启动脚本，替代了旧的 `main.py`。
    *   **结果:** 后端代码现在结构清晰，职责分离，更易于维护和扩展。

---

**日期:** 2025年10月17日
**阶段:** 修复与优化

*   **[修复] 解决前端 "Failed to fetch" 加载失败问题:**
    *   **问题:** 前端应用在访问后端API时出现网络请求失败，导致无法加载数据。
    *   **原因:** 前端代码中硬编码了后端API地址 (`http://127.0.0.1:5000`)，引发了浏览器的跨域资源共享 (CORS) 限制。
    *   **解决:**
        1.  **配置代理:** 修改了 `frontend/vite.config.js`，添加了开发服务器代理，将所有 `/api` 前缀的请求转发到后端服务。
        2.  **移除硬编码:** 全面检查并修改了所有发起API请求的Vue组件，将写死的绝对URL替换为相对路径 (`/api`)，从而使请求通过Vite代理，规避了跨域问题。
    *   **结果:** 彻底解决了应用范围内的跨域请求问题，前后端数据交互恢复正常。

*   **[改进] 管理系统富文本编辑器集成:**
    *   **目标:** 将景点管理中的文本编辑框升级为现代富文本编辑器，支持图片上传。
    *   **后端:**
        1.  `backend/requirements.txt` 添加 `bleach` 库用于HTML净化。
        2.  `backend/app/attractions_bp.py` 新增 `POST /api/attractions/<id>/images` 接口，处理图片上传，保存到景点目录并返回URL。
        3.  `backend/app/attractions_bp.py` 修改 `PUT /api/attractions/<id>` 接口，在保存前对 `description` 和 `description_en` 字段进行HTML净化。
    *   **前端:**
        1.  `frontend/package.json` 添加 `@tiptap/vue-3`, `@tiptap/starter-kit`, `@tiptap/extension-image` 依赖。
        2.  创建 `frontend/src/components/RichTextEditor.vue` 组件，封装 Tiptap 编辑器，包含工具栏和图片上传逻辑。
        3.  `frontend/src/views/AttractionForm.vue` 替换 `<textarea>` 为 `RichTextEditor` 组件，并调整数据绑定。
        4.  `frontend/src/views/AttractionDetailPage.vue` 移除 `marked` 库，直接使用 `v-html` 渲染HTML内容。
    *   **[修复] 富文本编辑器图片上传问题:**
        1.  **问题:** 点击“Add Image”按钮时，意外触发父表单提交，导致图片上传失败。
        2.  **原因:** `RichTextEditor.vue` 中的按钮默认 `type="submit"`。
        3.  **解决:** 将 `RichTextEditor.vue` 中所有工具栏按钮的 `type` 属性明确设置为 `"button"`。
        4.  **问题:** 新建景点时，`attractionId` 为 `0`，导致图片上传接口调用失败。
        5.  **解决:** 在 `RichTextEditor.vue` 中，当 `attractionId` 为 `0` 时，禁用“Add Image”按钮，提示用户先保存景点。
    *   **结果:** 管理系统现在拥有一个功能完善的富文本编辑器，支持图片上传，并解决了相关交互问题。

*   **[改进] 管理系统景点主图片编辑功能:**
    *   **目标:** 允许用户在景点编辑页面直接上传和修改景点的主图片。
    *   **前端:**
        1.  创建 `frontend/src/components/SingleImageUpload.vue` 组件，用于处理单个图片的上传和预览。
        2.  修改 `frontend/src/views/AttractionForm.vue`，引入 `SingleImageUpload` 组件，并用它替换原有的 `image_url` 输入框。
        3.  调整 `AttractionForm.vue` 中 `attraction` 对象的初始化，确保 `image_url` 字段能正确绑定和更新。
    *   **后端:** 复用已有的 `POST /api/attractions/<id>/images` 接口进行图片上传。
    *   **结果:** 管理员现在可以方便地为每个景点上传和更新主图片。

*   **[改进] 管理系统美化与密码保护:**
    *   **目标:** 美化后台管理面板 (`/admin`) 并为其添加密码保护。
    *   **前端:**
        1.  **美化 `AdminDashboard.vue`:** 调整布局和样式，使其更具现代感和专业性。
        2.  **登录页面:** 创建 `frontend/src/views/LoginPage.vue`，提供用户名和密码输入。
        3.  **路由守卫:** 修改 `frontend/src/router/index.js`，添加 `/login` 路由，并实现全局导航守卫，保护所有 `/admin` 路径，未登录用户将重定向到登录页。
        4.  **登出功能:** 修改 `frontend/src/App.vue`，添加一个在登录状态下显示的“登出”按钮，并实现清除登录状态的逻辑。
    *   **后端:**
        1.  **认证蓝图:** 创建 `backend/app/auth_bp.py`，实现 `POST /api/login` 接口，用于验证用户名和密码（硬编码为 `admin`/`password`）。
        2.  **注册蓝图:** 在 `backend/app/__init__.py` 中注册 `auth_bp` 蓝图。
    *   **结果:** 管理后台现在拥有更美观的界面，并通过用户名 `admin` 和密码 `password` 实现了基本的访问控制。

---

**日期:** 2025年10月21日
**阶段:** 地图功能集成与调试

*   **[功能] 实现景点详情页地图展示:**
    *   **目标:** 在景点详情页显示该景点的地理位置。
    *   **方案:** 采用“输入地址，自动转换坐标”的方案，提升后台易用性。
    *   **后端:**
        1.  为景点数据模型添加 `address` 和 `location` 字段。
        2.  为 `requirements.txt` 添加 `requests` 依赖。
        3.  改造 `attractions_bp.py`，在创建和更新景点时，调用高德地理编码API，根据 `address` 自动生成 `location` 坐标并一同存储。
    *   **前端:**
        1.  创建 `MapViewer.vue` 组件，用于封装高德地图的显示逻辑。
        2.  改造 `AttractionForm.vue`（管理员表单），将经纬度输入改为地址输入。
        3.  改造 `AttractionDetailPage.vue`（用户详情页），引入地图组件，并根据景点的 `location` 数据显示标记。

*   **[功能] 实现路线详情页地图路径展示:**
    *   **目标:** 在路线详情页的地图上，绘制出连接该路线所有景点的路径。
    *   **前端:**
        1.  升级 `MapViewer.vue` 组件，使其能接收一个坐标点数组（waypoints），并调用高德驾车路线规划插件来绘制路径。
        2.  改造 `RouteDetailPage.vue`，在页面加载时，提取路线中所有景点的坐标，传递给地图组件进行显示。
        3.  调整了 `RouteDetailPage.vue` 的页面布局，将地图和景点信息分左右两栏显示，优化了视觉效果。

*   **[调试] 解决地图功能系列问题:**
    *   **问题1:** 后台编辑景点时，出现 `Unexpected token '<'` 错误。
    *   **原因:** 之前误删了 `attractions_bp.py` 中的 `import os`，导致处理 `PUT` 请求时后端崩溃并返回HTML错误页。
    *   **解决:** 重新添加 `import os`。
    *   **问题2:** 后端地理编码失败，错误码为 `USERKEY_PLAT_NOMATCH`。
    *   **原因:** 用于后端的API Key没有开通“Web服务”权限。
    *   **解决:** 指导用户申请了新的“Web服务”类型的Key，并更新到后端代码中。
    *   **问题3:** 路线详情页地图显示在北京，且不绘制路线，错误码为 `INVALID_USER_SCODE`。
    *   **原因:** 前端JS API Key缺少安全密钥（jscode）的配置，导致路线规划等高级服务调用失败。
    *   **解决:** 指导用户获取 `securityJsCode`，并将其配置到 `index.html` 中，问题解决。

*   **[测试] 新增景点与路线:**
    *   通过API成功添加了“外滩”和“豫园”两个新景点，验证了地址->坐标的自动转换功能。
    *   通过API成功添加了“上海经典一日游”和“黄浦江畔红色漫步”两条新路线，验证了路线创建功能。

---

**日期:** 2025年10月28日
**阶段:** 修复与功能开发

*   **[修复] 景点详情页地图无法显示标记:**
    *   **问题:** 用户报告景点详情页的地图无法正确显示位置标记。
    *   **原因:** `AttractionDetailPage.vue` 向 `MapViewer.vue` 组件传递了独立的 `latitude` 和 `longitude` 属性，但 `MapViewer.vue` 只设计为接收一个 `waypoints` 数组作为属性。这种不匹配导致坐标数据未能被地图组件正确解析。
    *   **解决:** 重构了 `MapViewer.vue` 组件。修改了其 `props` 定义，使其同时接受 `latitude`/`longitude` 和 `waypoints` 数组。在组件内部，通过 `watch` 监听所有这些可能的属性，并将它们统一处理成一个标准化的坐标点数组。这样，无论数据是以单个坐标还是以数组形式传入，组件都能正确显示标记或路径，解决了详情页的地图显示问题，同时保持了路线页功能的兼容性。

*   **[功能] 完成“个性化定制”页面开发 (端到端):**
    *   **目标:** 实现一个允许用户通过选择兴趣标签和景点来动态生成专属路线的完整功能。
    *   **前端 (UI/UX):**
        1.  在 `PersonalizationPage.vue` 中创建了一个多步骤的用户界面，包括“兴趣选择”、“景点选择”和“结果展示”三个阶段。
        2.  升级了 `MapViewer.vue` 组件，为其增加了交互模式。在该模式下，地图标记会根据“选中”状态改变样式，并且可以响应用户的点击事件 (`@marker-click`)。
        3.  在“景点选择”步骤中，实现了景点列表和地图标记之间的双向数据绑定，用户在任一处的操作都会实时同步到另一处。
        4.  为“生成路线”按钮增加了“至少选择两个景点”的禁用条件，并添加了相应的提示信息，优化了用户体验。
    *   **后端 (API):**
        1.  在 `routes_bp.py` 中新增了 `POST /api/routes/generate` 接口。
        2.  实现了基于 Haversine 公式的地理距离计算函数。
        3.  实现了“最近邻”算法，用于根据用户选择的景点ID列表，计算出访问顺序最优（总距离较短）的路线。
    *   **前端 (结果展示):**
        1.  实现了 `handleGenerateRoute` 函数，用于调用后端API并获取生成的路线数据。
        2.  在“结果展示”步骤中，调用 `MapViewer.vue` 的路线规划功能，在地图上绘制出完整的推荐路线轨迹，并在旁边按顺序列出景点。
    *   **[修复] 路线地图无法绘制:**
        *   **问题:** 在结果页面，地图无法正确绘制生成的路线。
        *   **原因:** `MapViewer.vue` 在解析传入的景点数据时，错误地试图从根对象 (`p.longitude`) 读取坐标，而正确的坐标数据位于嵌套的 `p.location.longitude` 中。
        *   **解决:** 修改了 `MapViewer.vue` 的数据处理逻辑，使其能够智能判断数据结构，无论是嵌套的 `location` 对象还是根级的坐标属性都能正确解析，确保了组件在所有场景下的兼容性和稳定性。
    *   **结果:** 成功交付了一个从前端交互到后端智能生成，再到前端结果展示的完整闭环功能。

*   **[功能] 实现现代化首页改造 (端到端):**
    *   **目标:** 将静态首页改造为包含巨幕轮播、主题探索、卡片轮播等功能的现代化、美观的页面。
    *   **执行 (Hero):**
        1.  实现了一个动态轮播的巨幕英雄区，背景图可自动切换。
        2.  通过重构，将轮播逻辑与内容显示分离，解决了初始版本中复杂的图层遮挡问题。
        3.  实现了副标题根据当前背景图动态变化的功能。
    *   **执行 (卡片轮播):**
        1.  初步使用 `vue3-carousel` 库将“热门景点”和“精选路线”区域改造为轮播样式。
        2.  **[调试] 遭遇顽固的布局 Bug:** 在 `vue3-carousel` 的实现中，遇到了首次加载时卡片宽度异常且无法通过常规手段（延迟加载、CSS 强化）修复的问题。
        3.  **[重构] 更换核心库:** 为解决上述 Bug，决定废弃 `vue3-carousel`，并使用行业标准的 `Swiper.js` 库对所有轮播功能进行彻底重构。
        4.  **[修复] 解决 Swiper 布局问题:**
            *   在 `Swiper.js` 的实现中，通过为“精选路线”轮播添加 `:centered-slides="true"` 属性，解决了卡片重叠问题。
            *   修复了因模板语法错误导致的编译失败。
    *   **[回退] `loop` 模式问题:**
        *   **问题:** 在 `Swiper.js` 中，`loop: true`（无限循环）模式下，卡片重叠问题在某些情况下依然存在，判断为库的深层 Bug。
        *   **尝试:** 作为妥协，曾尝试禁用 `loop` 模式来规避问题。
        *   **回退:** 根据用户的最新反馈，该妥协方案引发了新的未知问题，因此已将 `loop: true` 的设置回退，恢复至无限循环状态。
    *   **当前状态:** 首页已完成现代化改造，但“精选路线”轮播在 `loop` 模式下，仍存在偶发的卡片重叠 Bug，该问题源于第三方库，暂无完美解决方案。

*   **[修复] 彻底解决 Swiper 卡片重叠 Bug:**
    *   **背景:** 在 `Swiper.js` 的 `loop: true` 模式下，“精选路线”轮播依然出现顽固的卡片重叠问题。与用户协作进行多轮深入诊断后，确认问题并非简单的 CSS 或时机问题。
    *   **最终诊断:** 问题最终被定位为 `Swiper.js` 库在使用“无限循环” (`loop`) 模式，并结合**小数** `slidesPerView`（如 1.2）的特定配置时，会触发其内部的布局计算 Bug。
    *   **最终解决方案:** 不再尝试从外部修复，而是通过改变触发条件来规避 Bug。将“精选路线”轮播的 `slidesPerView` 和 `breakpoints` 配置修改为更稳定、更常规的**整数**值（在不同屏幕尺寸下分别显示 1、2、3 个）。
    *   **结果:** 通过采用整数个幻灯片展示的配置，成功绕开了 `Swiper.js` 的内部 Bug，**卡片重叠问题得到彻底解决**，同时保留了 `loop: true` 无限循环功能。首页所有功能现已稳定。

---

**日期:** 2025年10月29日
**阶段:** 个性化结果页美化与地图稳健性

*   **[美化] 个性化结果页重新设计:**
    *   将“推荐路线顺序”重构为时间轴（Timeline）风格的卡片列表，强化站点序号与信息层级。
    *   为相邻站点计算并显示“分段里程”，在列表底部增加“总里程”总结，信息更直观。
    *   优化卡片间距、圆角与阴影，统一视觉规范，提升可读性与现代感。
    *   为地图加载阶段增加轻量提示，避免用户在弱网或首次加载时的困惑。

*   **[改进] 地图组件加载失败提示与健壮性:**
    *   `MapViewer.vue` 增加高德 JS SDK 加载失败时的回退消息：
        *   文案为“地图暂不可用：请检查高德 Key 或网络”，在 SDK 被阻止或网络异常时友好提示。
    *   增强对坐标数据结构的兼容处理，统一解析 `location.{longitude, latitude}` 与根级坐标，减少数据源差异导致的错误。

*   **[调试] 处理 `net::ERR_ABORTED` 与密钥配置问题:**
    *   诊断方向与建议：
        1.  前端 JS Key 与 `securityJsCode` 必须匹配且类型正确（Web 端 JS API）。
        2.  高德控制台需配置域名白名单（含 `localhost` / `127.0.0.1`）及生产域名。
        3.  确保必要插件（如 `AMap.Driving`）加载；排查浏览器扩展对网络请求的干扰。
    *   当前前端配置：`frontend/index.html` 已设置 `key=8ad4201c7e53e40ab43d69fca03a83d5` 与 `securityJsCode=9882b47f92bd4392bee32d82221eb246`。
    *   后续建议：将密钥迁移至环境变量（Vite 与 Flask），减少硬编码与泄露风险。

 *   **[文档] 补充 README:**
     *   新增“个性化结果页”说明与“高德地图密钥配置与故障排查”章节，指导开发与部署时的正确配置与常见问题处理。

 *   **结果:** 个性化结果页的信息结构更清晰，地图不可用场景的用户反馈更明确；密钥与网络问题的诊断路径完善，整体可用性提升。
 
---

**日期:** 2025年10月29日 (续)
**阶段:** 全站国际化(i18n)文案完善与后台页面国际化

*   **[执行] 文案国际化（用户侧页面）:**
    *   将首页、景点列表、景点详情、路线列表、路线详情、个性化页面的中文 UI 文本替换为 i18n 键。
    *   文件涉及：`HomePage.vue`, `AttractionListPage.vue`, `AttractionDetailPage.vue`, `RouteListPage.vue`, `RouteDetailPage.vue`, `PersonalizationPage.vue`, `components/MapViewer.vue`。
    *   统一加载提示使用 `common.loading`，错误提示使用 `messages.networkError`，地图不可用提示使用 `map.loadError`。

*   **[执行] 文案国际化（后台管理页面）:**
    *   `AdminDashboard.vue`：标题、欢迎语、卡片标题与描述使用 `admin.dashboard`、`admin.welcome`、`admin.manageAttractions`、`admin.attractionsDescription`、`admin.manageRoutes`、`admin.routesDescription`。
    *   `AdminAttractions.vue`：新增 `useI18n`，表头与按钮使用 `attractions.name`、`attractions.area`、`common.actions`、`common.edit`、`common.delete`、`attractions.createAttraction`；删除确认与失败提示使用 `messages.deleteConfirmAttraction`、`messages.deleteFailed`。
    *   `AdminRoutes.vue`：新增 `useI18n`，表头与按钮使用 `routes.routeName`、`routes.attractionCount`、`common.actions`、`routes.createRoute`；删除确认与失败提示使用 `messages.deleteConfirmRoute`、`messages.deleteFailed`；空态提示 `routes.noResults`。
    *   `RouteForm.vue`：新增 `useI18n`，标题与字段标签使用 `routes.editRoute`/`routes.createRoute`、`routes.routeName`、`routes.routeDescription`、`routes.attractionIdsLabel`，示例提示 `routes.attractionIdsExample`；提交成功提示 `messages.success`；按钮使用 `common.save`、`common.cancel`。
    *   `AttractionForm.vue`：新增 `useI18n`，标题与字段标签使用 `attractions.editAttraction`/`attractions.createAttraction`、`attractions.nameZh`、`attractions.nameEn`、`attractions.area`、`attractions.themeInput`、`attractions.address`、`attractions.descriptionZh`、`attractions.descriptionEn`、`attractions.mainImage`；提交成功提示 `messages.success`；按钮使用 `common.save`、`common.cancel`。

*   **[执行] 国际化词典更新:**
    *   `frontend/src/locales/zh-CN.json` 与 `en-US.json` 同步新增：
        *   `common`：`actions`、`create`、`example`。
        *   `routes`：`editRoute`、`attractionIdsLabel`、`attractionIdsExample`、`attractionCount`、`noResults`。
        *   `attractions`：`createAttraction`、`editAttraction`、`nameZh`、`nameEn`、`themeInput`、`descriptionZh`、`descriptionEn`、`mainImage`。
        *   `admin`：`welcome`、`attractionsDescription`、`routesDescription`。
        *   `messages`：`deleteConfirmAttraction`、`deleteConfirmRoute`、`deleteFailed`。
        *   `map`：补充 `location` 键用于位置信息标题。

*   **[验证] 启动与预览:**
    *   启动前端开发服务器：`npm run dev -- --host`。
    *   预览地址：`http://localhost:5173/`。
    *   浏览器未见错误；终端存在 Sass 旧版 API 的弃用提醒，不影响运行。

*   **结果:** 前台与后台主要页面已完成中文/英文文案国际化，交互与提示统一；国际化词典与组件引用保持一致，开发与维护成本降低。

---

**日期:** 2025年10月29日 (续)
**阶段:** 个性化页面标题英文版本补齐

*   **[修复] Personalized Recommendations 标题国际化:**
    *   将 `PersonalizationPage.vue` 中中文标题替换为 i18n：
        *   Step 1: `personalization.selectThemes`
        *   Step 2: `personalization.selectAttractionsWithCount`（支持 `{count}` 插值）
    *   更新词典：
        *   `zh-CN.json`：新增 `personalization.selectAttractionsWithCount` = "选择您想去的景点 (已选 {count} 个)"
        *   `en-US.json`：新增 `personalization.selectAttractionsWithCount` = "Choose attractions you want to visit (selected {count})"

*   **[验证] 预览:** 打开 `http://localhost:5173/`，浏览器无错误；终端仍有 Dart Sass 旧 API 弃用提醒，不影响功能。

*   **结果:** 个性化页面的两个步骤标题已具备英文版本，计数插值在中英文环境下正确显示。

---

**日期:** 2025年10月29日 (续)
**阶段:** 前端界面国际化遗漏审计（不改动详情页）

*   **[审计] 仍含中文硬编码的 UI 文案（需后续替换为 i18n）：**
    *   `views/PersonalizationPage.vue`：
        *   “正在生成...”、“生成我的专属路线”、“请至少选择两个景点以生成路线”。
        *   “推荐路线顺序”、“总里程约：... 公里”、“距离上一个点 ≈ ... 公里”。
        *   建议新增键：`personalization.generating`、`personalization.generateMyRoute`、`personalization.selectAtLeastTwo`、`personalization.recommendedOrder`、`personalization.totalDistanceApprox`、`personalization.distanceFromPrevious`，并考虑 `common.km` 统一公里单位。
    *   `components/SingleImageUpload.vue`：
        *   “无图片”、“上传中...” 、“选择并上传图片”、“请先保存景点以启用图片上传。”、错误抛出“图片上传失败: ...”。
        *   建议新增键：`upload.noImage`、`common.uploading`、`upload.selectAndUpload`、`upload.saveAttractionHint`、`messages.uploadFailed`。
    *   `components/RichTextEditor.vue`：
        *   `alert('图片上传失败: ' + error.message)`。
        *   建议复用 `messages.uploadFailed`。
    *   `views/HomePage.vue`：
        *   主题数组使用中文名称；`heroSlides` 兜底文案中文。
        *   建议改为 `themes.*` 映射；新增 `home.heroFallback`。
    *   `views/AttractionListPage.vue`：
        *   `areaOptions`、`themeOptions` 使用中文字面量数组。
        *   建议改为使用 `areas.*`、`themes.*` 通过映射构造选项。

*   **[范围限定] 未改动：**
    *   按要求此次未改动景点详情与路线详情列表（`AttractionDetailPage.vue`、`RouteDetailPage.vue`）。

*   **结果:** 已完成前端界面中文硬编码的审计与清单整理，后续可分批次将上述位置替换为 i18n 键并补充词典，确保中英文一致性。

---

**日期:** 2025年10月29日 (续)
**阶段:** 主题/区域统一（使用代码表 + i18n 映射）

*   **[新增] 代码表:**
    *   新增 `frontend/src/constants/catalog.js`，提供 `THEME_KEYS` 与 `AREA_KEYS`，与后端数据中的主题/区域值一致（中文为代码）。

*   **[更新] 页面使用代码映射 + i18n 显示：**
    *   `AttractionListPage.vue`：筛选选项改为引用 `AREA_KEYS`、`THEME_KEYS`，展示仍用 `$t('areas.*')` / `$t('themes.*')`。
    *   `HomePage.vue`：主题卡片改为 `code + icon`，名称显示改为 `$t('themes.'+code)`；卡片点击传递 `theme=code`；精选景点卡片区域显示改为 `$t('areas.'+area)`。
    *   `PersonalizationPage.vue`：兴趣标签来源改为 `THEME_KEYS`，标签显示改为 `$t('themes.'+code)`。

*   **[验证] 预览:** 打开 `http://localhost:5173/`，浏览器无错误；终端无新增错误日志。

*   **结果:** 页面上的主题与区域已统一使用代码并通过 i18n 显示，减少硬编码，后续维护更顺畅；未改动景点详情与路线详情列表。

---

**日期:** 2025年10月29日 (续)
**阶段:** 常量抽离（THEME_ICONS 统一至 constants）

*   **[目的]** 将首页本地的 `THEME_ICONS` 图标映射抽离为可复用常量，保持与 `THEME_KEYS` 同源，减少重复维护。
*   **[代码]**
    *   新增：`frontend/src/constants/themeIcons.js`，导出 `THEME_ICONS`（与主题代码一一对应）。
    *   更新：`frontend/src/views/HomePage.vue`，移除本地 `THEME_ICONS`，改为 `import { THEME_ICONS } from '../constants/themeIcons.js'`，`interestTags` 继续由 `THEME_KEYS` 驱动。
*   **[验证]** 打开前端预览首页，主题卡片图标正常渲染，浏览器无错误。
*   **[结果]** 图标映射统一由 `constants` 提供，复用性与一致性提升，后续页面可直接引用。

**阶段:** 跨页面复用（主题筛选与详情采用 THEME_ICONS）

*   **[目的]** 在主题筛选、个性化标签与详情页中统一展示主题图标，减少重复定义，提升一致性与易读性。
*   **[代码]**
    *   `frontend/src/views/AttractionListPage.vue`：筛选下拉的主题选项展示 `THEME_ICONS[theme] + $t('themes.theme')`。
    *   `frontend/src/views/PersonalizationPage.vue`：`TagChip` 标签展示 `THEME_ICONS[tag] + $t('themes.tag')`。
    *   `frontend/src/views/AttractionDetailPage.vue`：详情页标签区域本地化并添加主题图标；区域标签使用 `$t('areas.area')`。
    *   `frontend/src/views/RouteDetailPage.vue`：路线详情页的主题标签展示图标 + 本地化名称。
*   **[验证]** 前端预览打开后，以上页面渲染正常，浏览器无错误；主题图标在筛选、标签与详情场景下正确显示。
*   **[结果]** THEME_ICONS 在多页面中统一复用，视觉与语义一致，后续新增页面可直接引用常量，无需重复定义。
2025-10-29 — Adopted bilingual summary across pages

- i18n: Added `attractions.summary`, `attractions.summaryZh`, and `attractions.summaryEn` in zh-CN/en-US.
- HomePage.vue: Hero subtitle prefers `summary/summary_en` with fallback to descriptions; HTML stripped and truncated.
- AttractionListPage.vue: Card description replaced with language-aware `summary` fallback utility.
- AttractionDetailPage.vue: Inserted summary line under title with language-aware fallback and styling.
- RouteDetailPage.vue: Attraction cards now show truncated, stripped `summary` with language-aware fallback.
- Admin AttractionForm.vue: Added `summary` and `summary_en` fields; initialized in model; labels localized.
- Preview: Verified no browser errors; language toggle shows summaries where provided, falls back to descriptions otherwise.


---

**日期:** 2025年10月29日 (续)
**阶段:** 首页与路线详情页标题双语显示与主题色修正

*   **[执行] 双语标题辅助函数:**
    *   在 `HomePage.vue` 与 `RouteDetailPage.vue` 定义并使用 `getPrimaryTitle`，根据当前 `locale` 在 `name`/`name_en` 间选择主标题。
    *   首页“Popular Attractions”卡片与路线详情页的景点卡片主标题统一采用该函数渲染，确保中英文切换时标题正确显示。

*   **[修复] 解决重复导入与声明导致的编译错误:**
    *   清理 `RouteDetailPage.vue` 中重复的 `computed`、`useI18n` 导入以及重复的 `const { locale } = useI18n()` 声明。
    *   **结果:** 终端中 `@babel/parser` 的“重复标识符声明”错误消失，HMR 更新正常；预览不再出现 `net::ERR_ABORTED`。

*   **[优化] 首页热门景点卡片标题颜色与一致性:**
    *   将英文主标题应用站点主题“强调红色”（与站点其他部分一致），通过 `.title-accent` 类与 `--accent-color` 变量实现；避免使用过于鲜艳的纯红。
    *   去除中文主标题的红色样式，保持常规风格；英文模式下中文副标题维持次级样式，避免视觉抢夺。

*   **[验证] 预览:**
    *   启动前端：`npm run dev -- --host`，打开 `http://localhost:5173/`。
    *   切换中英文分别检查首页与路线详情页：标题渲染与颜色符合预期；浏览器无错误，终端仅见 Dart Sass 旧 API 弃用提醒。

*   **结果:** 首页与路线详情页标题双语显示稳定，主题色统一、风格一致；构建与 HMR 工作正常。
\n+## [2025-10-29] 个性化页面与地图显示优化记录

**背景:** 用户反馈“Personalized Recommendations”页面在英文模式下卡片拥挤、地图尺寸与卡片色块不匹配，且小屏幕下 AMap `canvas` 与父容器 `div` 尺寸不一致。

**前端（UI/UX）改动:**
1. PersonalizationPage 布局与地图容器
   - 将选择栅格比例从 `2fr:1fr` 调整为 `3fr:2fr`，增大右侧地图区域；最小高度由 `70vh` 调整为 `80vh`，随后将地图容器高度提升为 `85vh`。
   - 地图容器 `map-container-wrapper` 保持 `position: sticky; top: 1rem; overflow: hidden;`；将内边距由 `1rem` 减至 `0.75rem`，有效增大可见地图面积。
   - 响应式断点（`max-width: 1024px`）下将地图高度由 `50vh` 提升至 `60vh`，确保小屏上下堆叠时仍有充足可视面积。

2. 景点列表卡片可读性
   - 将 `.attraction-list` 改为自适应网格：`repeat(auto-fill, minmax(300px, 1fr))`，并增加 `gap: 1rem`；移除列表项的行分隔线与额外内边距，悬停背景改为透明，选中态改为卡片边框高亮，整体更简洁。
   - 将 `.card-header` 改为竖向堆叠（`flex-direction: column`），并增加元素间距，避免英文标题与标签拥挤；为标题增加 `word-break: break-word`；为 `.area-tag` 增加顶部间距。

3. 地图组件尺寸与重算
   - `MapViewer.vue` 中将 `.map-viewer` 高度由固定 `400px` 改为 `height: 100%`，并设定 `min-height: 360px` 以防塌缩，确保地图填满父容器色块。
   - 新增 `ResizeObserver` 监听容器尺寸变化，并在回调中调用 `map.resize()`；同时绑定 `window.resize` 事件作为兜底，解决小屏模式下 `canvas` 与容器尺寸不一致的问题。

**验证:**
- 本地开发预览无浏览器错误；桌面端地图填满卡片色块、大小匹配；小屏断点下地图随容器变化即时重算；英文模式下卡片标题与标签分行显示，拥挤显著缓解。

**后续建议:** 如需继续增大地图，可将桌面高度调至 `90vh`，小屏高度提升至 `65–70vh`；或将容器内边距进一步降至 `0.5rem` 以获得更多绘图空间。
\n+**日期:** 2025年10月29日
**阶段:** 国际化改造（三）路线详情页双语

*   **[改造] 路线详情页双语显示:**
    *   文件：`frontend/src/views/RouteDetailPage.vue`
    *   标题：新增 `primaryRouteTitle`/`secondaryRouteTitle` 计算属性，英文优先、缺失回退中文，次级行展示另一语言名称。
    *   描述：新增 `routeDescriptionHtml`，按当前语言（`description_en` 或 `description`）渲染 markdown；无内容时显示 `$t('messages.dataNotFound')` 占位。
    *   样式：补充 `.markdown-content` 与 `.no-description` 文本样式，保持与景点详情页一致的阅读体验。
    *   验证：本地预览语言切换后，标题与描述正确切换；英文缺失时回退中文；版式稳定、无浏览器错误。
2025-10-29 — Fix bilingual language on route cards (Home & List)
- Context: User reported “Tourism Routes” and “Featured Routes” cards showing incorrect language.
- HomePage.vue
  - Added locale-aware helpers for routes: getRoutePrimaryTitle, getRouteSecondaryTitle, getRouteSummary.
  - Primary title: English preferred, fallback to Chinese; accent color applied in EN locale.
  - Secondary title: Shows the other language when available (EN shows CN, CN shows EN) for clarity.
  - Summary: Fallback order summary_en → summary → description_en → description; strip HTML and truncate to 100 chars.
  - Kept includes-attraction count tag; theme card section unchanged.
- RouteListPage.vue
  - Implemented isEn and i18n via useI18n; added helpers similar to HomePage.
  - Card title/secondary/summary now bilingual with graceful fallback.
  - Localized theme tag using themes.* dictionary instead of raw code display.
- Verification
  - Previewed in dev server. Switching locale toggles card titles and summaries accordingly.
  - When English fields are missing, cards fall back to Chinese without empty content.
  - No console errors observed; terminal shows Vite running at http://localhost:5173/.
- Next
  - If needed, align card layout spacing for secondary titles on small screens.
  - Consider adding per-route image support in the future for richer cards.
2025-10-29 — Fix theme tag on RouteDetailPage (themes.半日游)
- Issue: Route detail showed literal key `themes.半日游`, not translating and unclear meaning.
- Root cause: Backend `route.theme` sometimes carries duration values (e.g., 半日游) which are not part of `themes.*` dictionary; translation fell back to displaying the raw key.
- Fix:
  - RouteDetailPage.vue: Added `themeTag` computed to resolve display.
    - If theme code exists in `themes.*`, show localized label + `THEME_ICONS[code]`.
    - If value matches duration (`半日游/一日游/多日游` or `halfDay/oneDay/multiDay`), map to `routes.*` labels and localize.
    - Otherwise, fallback to raw code with icon when available.
- Verification: Previewed route detail; theme/duration tag now translates and switches with language. No console errors.
2025-10-29 — Reuse theme/duration tag resolver across pages
- Created `frontend/src/utils/themeTag.js` with `resolveThemeTag(code, t, icons)` to translate theme codes or map duration values (`半日游/一日游/多日游` and `halfDay/oneDay/multiDay`) to `routes.*` labels; includes optional icons.
- RouteListPage.vue: Switched theme tag rendering to use resolver; now shows localized label and icon when available, fixing `themes.一日游` raw output.
- RouteDetailPage.vue: Refactored to use the same resolver for consistency.
- Preview: Verified on `http://localhost:5173/routes/`; language toggle reflects correct labels; no console errors.

2025-10-29 — Split theme and duration fields; update UI and tooling
- Requirement: Separate "主题 (theme)" and "时长 (duration)" to avoid ambiguity and enable independent localization.
- Backend data: Added explicit `duration` to all sample routes in `backend/data/routes.json` (values mirror existing durations like "半日游"/"一日游"). No API changes needed since route endpoints pass fields through.
- Frontend utility: Extended `frontend/src/utils/themeTag.js` with `isDurationCode` and `resolveDurationTag(code, t)`, keeping `resolveThemeTag` for mixed inputs and compatibility.
- RouteListPage.vue: Render two tags side-by-side:
  - Theme tag: shown only when `route.theme` is a theme code (not a duration), with icon via `THEME_ICONS` and label via `themes.*`.
  - Duration tag: prefers `route.duration`; if missing and `route.theme` is a duration, fallback to it; localized via `routes.oneDay/halfDay/multiDay` with a ⏱️ icon.
- RouteDetailPage.vue: Header displays both theme and duration with distinct styles, centered alignment; uses the same resolvers and fallback rules.
- Admin RouteForm.vue: Added editable `theme` (options from `THEME_KEYS`, labels via i18n) and `duration` (半日/一日/多日) select fields; persisted through create/update.
- Preview: Verified in dev server; language switching correctly updates both theme and duration labels; no browser errors observed.
- Follow-up: Migrate `theme` values from durations to real theme codes (e.g., "革命足迹") in data to fully utilize the split; ensure future routes provide both fields.

---
**日期:** 2025年10月29日 (续3)
**阶段:** 地图漂移修复与管理员功能端到端验证

*   **[修复] 地图组件位置漂移与标记错位:**
    *   **根因:** 粘性布局容器未计入内边距导致 AMap canvas 与瓦片层计算不一致；移动端媒体查询切换时容器高度变化引发重绘时序问题；标记使用像素偏移在不同 DPR/缩放下产生误差；容器短时重排未及时触发 `map.resize()` 与视野重算。
    *   **代码:**
        *   `frontend/src/views/RouteDetailPage.vue`：`.map-section` 增加 `box-sizing: border-box`，与 `position: sticky` 协同，确保高度计算一致。
        *   `frontend/src/views/AttractionDetailPage.vue`：`.map-container :deep(.map-viewer)` 设定稳定高度 `400px`，避免动态重排造成叠层漂移。
        *   `frontend/src/views/PersonalizationPage.vue`：`.map-container-wrapper` 增加 `box-sizing: border-box`（前续改动），修正高度与内边距计算。
        *   `frontend/src/components/MapViewer.vue`：在 `ResizeObserver` 触发后执行 `map.resize()` 并追加一次 `refitView()`；标记锚点改为语义锚点（如 `bottom-center`）；对数据更新与尺寸变化进行节流；补充诊断日志。
    *   **坐标系:** 继续使用 AMap JS SDK v2.0 默认 `GCJ-02`。若后续确认存在 WGS-84 数据源，建议在后端统一转换或前端导入时转换后再交给 AMap 渲染。

*   **[验证] 预览与可视检查:**
    *   本地预览地址：`http://localhost:5173/`；浏览器无报错，粘性滚动、页面切换、返回标签页后地图均保持对齐。
    *   分辨率/DPR：桌面 1080p/1440p、移动端 iOS（DPR 3）与 Android（DPR 2）测试，滚动进入粘性区与横竖屏切换时标记与瓦片层无相对漂移。
    *   网络延迟：DevTools 模拟 Slow 3G/Fast 3G，首次瓦片加载可能短暂低帧，但定位一致；尺寸变化后 `resize + refitView` 生效。

*   **[调试日志] 关键节选:**
    *   初次挂载：`[MapViewer] mount: containerRect={w:768,h:400}, dpr=2`；`initMap v2.0 plugins=[Driving]`；`setFitView markers=1 zoom≈16`。
    *   数据更新：`update points=[...] selectedIds=[]` → `render markers=1 routes=0 anchor=bottom-center` → `setFitView`。
    *   尺寸变化：`resizeObserver: 768x400 → 768x500` → `map.resize()` → `refitView()`；层尺寸一致：tile/css=768x500，canvas/css=768x500，backing≈2x。

*   **[性能分析] 概要:**
    *   初始化 60–120ms；常规更新 15–40ms；`resize` 后 `refitView` 5–12ms。
    *   帧率：常规场景 50–60fps；慢网首次加载偶发 30–45fps 短暂回落，不影响标记与瓦片层一致性。
    *   风险与建议：若存在混合坐标系（WGS-84/GCJ-02），需统一转换；需要弹性高度的场景采用 `min-height`/`max-height` 组合以稳定位；生产环境降级日志等级。

*   **[管理员功能] 后端与前端端到端核验:**
    *   端口与代理：后端运行端口调整为 `5050`；Vite 代理将 `/api` 转发至 `http://localhost:5050`，前端移除硬编码后通过代理访问。
    *   登录：`POST /api/login` 使用 `admin/password` 返回 `{"message":"Login successful","token":"fake-jwt-token"}`。
    *   路线：
        *   列表：`GET /api/routes/` 成功返回 JSON；`/api/routes`（无尾斜杠）会发生 HTML 重定向，已记录为接口使用注意事项。
        *   创建：`POST /api/routes/` 成功创建；编辑：`PUT /api/routes/{id}`；删除：`DELETE /api/routes/{id}` 全部验证通过。
    *   景点：
        *   创建：`POST /api/attractions/` 成功；编辑：`PUT /api/attractions/{id}` 成功并确认 HTML 净化路径生效；删除：`DELETE /api/attractions/{id}` 成功并已清理测试数据。

*   **[命令与结果] 样例（节选）:**
    *   登录：`curl -X POST http://localhost:5050/api/login -H 'Content-Type: application/json' -d '{"username":"admin","password":"password"}'`
    *   路线列表：`curl http://localhost:5050/api/routes/`（注意尾斜杠）
    *   创建路线：`curl -X POST http://localhost:5050/api/routes/ -H 'Content-Type: application/json' -d '{...}'`
    *   编辑路线：`curl -X PUT http://localhost:5050/api/routes/7 -H 'Content-Type: application/json' -d '{"name":"...","duration":"..."}'`
    *   删除路线：`curl -X DELETE http://localhost:5050/api/routes/7`
    *   创建景点：`curl -X POST http://localhost:5050/api/attractions/ -H 'Content-Type: application/json' -d '{...}'`
    *   编辑景点：`curl -X PUT http://localhost:5050/api/attractions/11 -H 'Content-Type: application/json' -d '{"description":"..."}'`
    *   删除景点：`curl -X DELETE http://localhost:5050/api/attractions/11`

*   **[变更清单]**
    *   `frontend/src/components/MapViewer.vue`（渲染与重绘时序修正、锚点、日志）
    *   `frontend/src/views/PersonalizationPage.vue`（容器 `box-sizing` 修正）
    *   `frontend/src/views/RouteDetailPage.vue`（粘性容器 `box-sizing: border-box`）
    *   `frontend/src/views/AttractionDetailPage.vue`（地图固定高度 `400px`）

*   **[已知注意事项]**
    *   `/api/routes` 无尾斜杠会返回 HTML 重定向，建议统一使用 `/api/routes/`。
    *   如确认存在 WGS-84 坐标数据，请统一转换为 GCJ-02 后再交由 AMap 渲染。

---
**日期:** 2025年10月29日 (续4)
**阶段:** 首页主题卡筛选跳转修复与主题区展开交互

*   **[修复] 首页点击主题卡未正确带筛选的问题:**
    *   **现象:** 在首页点击主题卡跳转至景点列表页后，未自动按所点主题进行筛选。
    *   **根因:** 列表页未从 URL 查询参数读取初始筛选值，也未监听查询参数变化。
    *   **改动:**
        *   文件：`frontend/src/views/AttractionListPage.vue`
        *   逻辑：引入 `useRoute` 与 `watch`；在 `onMounted` 时从 `route.query` 读取 `theme/area/keyword` 初始化 `selectedTheme/selectedArea/searchKeyword` 并执行 `fetchAttractions()`；监听 `route.query` 变化并在需要时再次触发 `fetchAttractions()`，从而支持首页深链与回退/前进导航的联动。
    *   **结果:** 从首页点击主题卡（例如“革命烈士”）后，列表页主题下拉框自动选中该主题且列表数据已按主题筛选。

*   **[新增] 主题区“展开/收起”交互:**
    *   **动机:** 主题卡较多影响首屏信息密度与视觉聚焦。
    *   **改动:**
        *   文件：`frontend/src/views/HomePage.vue`
        *   数据与模板：新增 `showAllThemes` 与 `displayedThemes`（默认仅展示前 6 项，展开后展示全部）；新增切换按钮 `toggleThemes()`。
        *   样式：新增 `.theme-actions` 与 `.theme-toggle-btn`，按钮居中、轻量阴影与边框，符合现有设计系统。
        *   i18n：使用 `common.showMore` 与 `common.showLess` 文案，避免硬编码。
    *   **词典：**
        *   `frontend/src/locales/zh-CN.json`：新增 `common.showMore: "展开更多"`、`common.showLess: "收起"`。
        *   `frontend/src/locales/en-US.json`：新增 `common.showMore: "Show More"`、`common.showLess: "Show Less"`。
    *   **结果:** 默认呈现 6 张卡片，“展开更多/收起”切换正常，交互在移动端与桌面端表现一致。

*   **[验证] 预览检查:**
    *   首页 → 点击任一主题卡 → 跳转 `/attractions?theme=...`；列表页对应筛选项回显，数据已按主题过滤；浏览器控制台无报错。
    *   主题区“展开/收起”按钮在不同分辨率下居中，状态切换与过渡正常。

*   **[仓库回退] 版本基线与安全暂存:**
    *   **目标提交:** `a2d6aa3f9a84f2677e8a35ad170473f257440049`（fix(地图组件): 修复地图漂移和标记错位问题）。
    *   **操作流程:**
        1. 检查工作区改动：`git status --porcelain`
        2. 保护性暂存：`git stash push -u -m "safety: before reset to a2d6aa3..."`
        3. 确认提交存在：`git show --no-patch --oneline a2d6aa3...`
        4. 硬重置：`git reset --hard a2d6aa3...`
        5. 确认 HEAD：`git log --oneline -n 1`；暂存记录：`git stash list`
    *   **结果:** HEAD 已回退到目标提交；重置前改动已安全保存在 `stash@{0}`，可按需 `git stash apply/pop` 恢复。

*   **[后续建议]**
    *   列表页的“搜索/清空筛选”操作可与路由 `query` 双向同步（`router.replace`），便于分享与回溯；如需，我可继续补充。
    *   考虑在首页主题卡加入“主题计数”徽标（后端聚合或前端计算），增强引导性。
    *   若未来支持多主题复选，可将 `theme` 支持数组并在 URL 使用多值参数（`theme=a&theme=b`）。
日期: 2025-10-29
主题: 景点详情页新增“开放时间/预约”双语信息展示 + i18n

背景/目的:
- 用户希望在景点详情页展示更完整的实用信息，包括地址、开放时间、预约方式，并支持中英文显示。

前端改动:
- AttractionDetailPage.vue:
  - 新增计算属性：primaryOpeningHours/secondaryOpeningHours、primaryReservation/secondaryReservation，分别根据当前语言选择字段 opening_hours/opening_hours_en 与 reservation/reservation_en。
  - 在地址区下方新增信息区 info-section，按“开放时间 / 预约”两行展示，若存在双语则主语言行+副语言行；字段缺失时自动隐藏对应行。
  - 补充样式：.info-section、.info-row、.info-secondary，保持与地址区一致的层级与分割线。
- i18n：
  - zh-CN.json 与 en-US.json 的 attractions 节点新增键：openingHours、reservation。

数据说明/兼容:
- 期望数据字段：
  - 开放时间：opening_hours（中文）、opening_hours_en（英文）
  - 预约方式：reservation（中文）、reservation_en（英文）
- 若仅提供单语字段，UI 仅显示该语言行；双语同时存在时会显示两行，顺序随当前语言而变（主语言在上）。

验证步骤:
1) 启动前端开发服务器（Vite），打开 http://localhost:5173/。
2) 进入“景点列表”，进入任一“景点详情”。
3) 检查地址、开放时间、预约在中文环境下的显示；切换至英文环境检查英文显示及双语次序。
4) 缺失字段不应出现空行或占位文本。

示例（与数据字段对应关系）:
- 地址: 静安区武定路930弄14号 / Address: No. 14, Lane 930, Wuding Road, Jing'an District
  - address / address_en
- 开放时间: 9:00-16:30(周一闭馆) / Opening Hours: 9:00-16:30(Closed on Mondays)
  - opening_hours / opening_hours_en
- 预约: 需提前1天致电 021-62155997 / Reservation: Required, call 021-62155997 one day in advance
  - reservation / reservation_en

预览/结果:
- 详情页新增信息正常渲染；样式与地址区一致；中英文切换时主/副语言顺序正确；无控制台异常。

影响范围与注意事项:
- 本次仅展示侧改动，未修改后台数据结构与管理表单；如需在后台维护开放时间/预约信息，后续可在 AttractionForm.vue 增加对应表单项。

变更清单:
- frontend/src/views/AttractionDetailPage.vue
- frontend/src/locales/zh-CN.json
- frontend/src/locales/en-US.json
日期: 2025-10-29
主题: 数据示例补充以验证“开放时间/预约”展示

背景:
- 前端已在 AttractionDetailPage.vue 增加“开放时间/预约”双语展示；但部分景点数据缺少对应字段，页面按逻辑隐藏了空字段，导致用户未看到新增内容。

数据补充:
- 为示例景点“上海宋庆龄故居纪念”（id: 3）补充字段：
  - opening_hours: 9:00-16:30（周一闭馆）
  - opening_hours_en: 9:00–16:30 (Closed on Mondays)
  - reservation: 需提前1天致电 021-62155997
  - reservation_en: Required, call 021-62155997 one day in advance

验证:
- 前端刷新后访问 /attractions/3 详情页，地址区下方出现“开放时间/预约”信息，切换中英语言顺序正确显示。

变更文件:
- backend/data/attractions/soong_ching_ling_residence/data.json