### **开发日志 (Development Log)**

**项目:** "红色印记：上海红色文旅双语导览平台"
**日期:** 2025年10月16日
**阶段:** 项目初始化与基本框架搭建

*   **[分析] 需求与架构分析:**
    *   阅读并理解了 `struct.txt` (技术架构)，明确了采用 `Vue.js` (前端) + `Python` (后端) + `JSON文件` (数据存储) 的技术路线。
    *   阅读并理解了 `task.txt` (项目需求)，明确了项目的功能目标，如智能推荐、关键词串联、双语支持等。

*   **[执行] 后端框架搭建:**
    *   创建了 `backend/data` 目录结构。
    *   创建了 `backend/requirements.txt` 并添加了 `Flask` 和 `Flask-Cors` 依赖。
    *   创建了 `backend/main.py`，并初始化了一个基础的、支持跨域 (CORS) 的 Flask Web 服务。
    *   在 `backend/data/` 目录下创建了 `attractions.json`, `routes.json`, `users.json` 三个空的JSON文件作为初始数据源。

*   **[执行] 前端框架搭建:**
    *   创建了 `frontend/src` 目录结构。
    *   创建了 `frontend/package.json`，配置了 `Vite` 作为构建工具，并添加了 `vue` 依赖。
    *   创建了前端入口页面 `frontend/index.html` 和 Vue 初始化脚本 `frontend/src/main.js`。
    *   创建了 Vue 的根组件 `frontend/src/App.vue`。

*   **[修复] 前端启动问题:**
    *   **问题:** `npm run dev` 启动时，Vite 报错 `Failed to parse source for import analysis`，无法处理 `.vue` 文件。
    *   **原因:** 忘记创建 Vite 配置文件来启用 Vue 插件。
    *   **解决:** 创建并配置了 `frontend/vite.config.js` 文件，在其中引入并使用了 `@vitejs/plugin-vue` 插件，问题解决。

*   **[执行] 实现景点列表功能 (端到端):**
    *   **数据:** 向 `backend/data/attractions.json` 添加了示例数据。
    *   **后端:** 在 `backend/main.py` 中创建了 `/api/attractions` API 接口，用于读取并返回景点数据。
    *   **前端:** 修改了 `frontend/src/App.vue`，实现了从后端获取数据、处理加载/错误状态，并使用 `v-for` 将景点列表渲染到页面上。
    *   **结果:** 成功打通前后端，实现了第一个核心功能的垂直切片。

*   **[执行] 集成 Vue Router 并重构前端结构:**
    *   **安装:** 在 `frontend` 目录中安装了 `vue-router`。
    *   **结构:** 创建了 `src/views` 和 `src/router` 目录。
    *   **页面:** 创建了6个核心页面的组件文件（`HomePage`, `AttractionListPage` 等）。
    *   **迁移:** 将景点列表的获取和显示逻辑从 `App.vue` 迁移到了 `views/AttractionListPage.vue`。
    *   **配置:** 创建了 `router/index.js` 配置文件，定义了所有页面的路由。
    *   **集成:** 修改了 `main.js` 以启用 `vue-router`。
    *   **布局:** 重构了 `App.vue`，使其成为包含全局导航栏和 `<router-view>` 的主布局文件。
    *   **结果:** 应用现在是单页应用（SPA），具备了多页面导航能力。

*   **[执行] 前端界面美化 (Apple Design):**
    *   **全局样式 (`App.vue`):**
        *   引入了类似 Apple Design 的设计系统变量（颜色、字体、圆角、阴影）。
        *   导航栏采用白色背景、底部边框和柔和阴影，提升了层次感。
        *   优化了导航链接的字体、颜色和激活状态，使其更清晰、更精致。
        *   更新了全局背景色和字体，提升了整体的视觉清晰度。
    *   **景点列表页 (`AttractionListPage.vue`):**
        *   重新设计了景点卡片，应用了更大的圆角 (`16px`) 和更柔和、更具层次感的阴影。
        *   增加了卡片的鼠标悬浮（hover）动效，提升了交互感。
        *   优化了卡片内部的文字排版和间距，使内容更易读。
        *   为“地区”标签添加了独立的样式，使其成为一个标签元素。

*   **[执行] 完成景点详情功能闭环:**
    *   **前端 (列表页):** 修改了 `AttractionListPage.vue`，使用 `<router-link>` 将每个景点卡片转换为指向详情页的动态链接。
    *   **后端 (API):** 在 `main.py` 中新增了 `/api/attractions/<int:attraction_id>` 接口，用于根据ID查找并返回单个景点的数据。
    *   **前端 (详情页):** 完整实现了 `AttractionDetailPage.vue`。该页面能从URL中获取ID，调用后端接口获取数据，并以符合设计风格的布局展示景点名称、标签、中英文介绍等详细信息。添加了“返回列表”按钮。
    *   **结果:** 成功完成了“浏览列表 -> 点击 -> 查看详情”的核心用户流程。

*   **[执行] 实现景点列表的搜索与筛选功能:**
    *   **前端 (UI):** 在 `AttractionListPage.vue` 中添加了用于关键词搜索的输入框，以及按“区域”和“主题”筛选的下拉菜单。
    *   **前端 (逻辑):** 重构了数据获取逻辑，现在可以根据用户输入构建查询URL（如 `?keyword=...&area=...`）并向后端请求数据。
    *   **后端 (API):** 升级了 `/api/attractions` 接口，使其能够解析URL查询参数，并根据参数（`keyword`, `area`, `theme`）对景点数据进行动态筛选，最后返回筛选后的结果。
    *   **结果:** “景点列表页”的核心交互功能已完成，用户可以方便地查找特定景点。

*   **[执行] 完成“路线”功能模块开发:**
    *   **数据:** 向 `routes.json` 文件添加了包含景点ID关联的示例路线数据。
    *   **后端 (API):** 在 `main.py` 中新增了 `/api/routes` 和 `/api/routes/<id>` 两个接口。详情接口会返回包含完整景点信息的“富集”数据。
    *   **前端 (列表页):** 实现了 `RouteListPage.vue`，用于获取并展示所有预设路线的列表。
    *   **前端 (详情页):** 实现了 `RouteDetailPage.vue`，用于展示单条路线的详细信息，并列出其中包含的所有景点（可点击跳转）。
    *   **结果:** 成功完成了“浏览路线 -> 点击 -> 查看路线详情（含景点列表）”的核心用户流程，应用内容得到扩充。

---

**日期:** 2025年10月16日 (续)
**阶段:** 核心功能增强与架构重构

*   **[重构] 数据存储结构升级:**
    *   **动机:** 为了支持更丰富的景点内容（如多张图片），将原有的单一 `attractions.json` 文件废弃。
    *   **方案:** 每个景点现在拥有一个独立的文件夹（以英文缩写命名），其中包含 `data.json` 文件和相关的图片资源。
    *   **执行:** 创建了 `backend/data/attractions` 目录，并为现有景点数据创建了对应的子目录和文件，旧的 `attractions.json` 已被删除。

*   **[执行] 实现图文混排功能:**
    *   **后端:** 重写了后端API，使其能够从新的目录结构中读取数据，并配置了静态文件服务以提供图片。
    *   **前端 (列表页):** `AttractionListPage.vue` 已更新，现在每个景点卡片都会显示一张封面图片。
    *   **前端 (详情页):** `AttractionDetailPage.vue` 已更新，添加了顶部的“英雄图”(Hero Image)。
    *   **前端 (富文本):**
        *   为前端项目安装了 `marked` 库，用于解析Markdown文本。
        *   将景点的 `description` 字段升级为Markdown格式，允许在文本中嵌入图片。
        *   `AttractionDetailPage.vue` 现在使用 `v-html` 指令渲染由 `marked` 解析后的HTML，实现了图文混排的介绍详情。

*   **[修复] 后端 500 错误:**
    *   **问题:** 在实现图文混排后，访问API时出现 "500 Internal Server Error"，错误信息为 "invalid group reference"。
    *   **原因:** 在 `main.py` 中，用于处理Markdown图片路径的正则表达式 `re.sub` 调用存在语法缺陷，导致服务器在处理数据时崩溃。
    *   **解决:** 重写了 `re.sub` 的替换逻辑，使用更安全的回调函数模式代替了有问题的f-string格式化，彻底解决了该bug。

*   **[重构] 后端模块化:**
    *   **动机:** `main.py` 文件变得过于庞大和复杂，不利于维护。
    *   **方案:** 采用Flask蓝图 (Blueprints) 和应用工厂 (Application Factory) 模式进行重构。
    *   **执行:**
        *   创建了 `backend/app` 包，其中包含 `data_loader.py` (数据逻辑), `attractions_bp.py` (景点API), 和 `routes_bp.py` (路线API)。
        *   在 `app/__init__.py` 中创建了 `create_app` 工厂函数，用于组装应用。
        *   使用新的 `run.py` 作为启动脚本，替代了旧的 `main.py`。
    *   **结果:** 后端代码现在结构清晰，职责分离，更易于维护和扩展。

---

**日期:** 2025年10月17日
**阶段:** 修复与优化

*   **[修复] 解决前端 "Failed to fetch" 加载失败问题:**
    *   **问题:** 前端应用在访问后端API时出现网络请求失败，导致无法加载数据。
    *   **原因:** 前端代码中硬编码了后端API地址 (`http://127.0.0.1:5000`)，引发了浏览器的跨域资源共享 (CORS) 限制。
    *   **解决:**
        1.  **配置代理:** 修改了 `frontend/vite.config.js`，添加了开发服务器代理，将所有 `/api` 前缀的请求转发到后端服务。
        2.  **移除硬编码:** 全面检查并修改了所有发起API请求的Vue组件，将写死的绝对URL替换为相对路径 (`/api`)，从而使请求通过Vite代理，规避了跨域问题。
    *   **结果:** 彻底解决了应用范围内的跨域请求问题，前后端数据交互恢复正常。

*   **[改进] 管理系统富文本编辑器集成:**
    *   **目标:** 将景点管理中的文本编辑框升级为现代富文本编辑器，支持图片上传。
    *   **后端:**
        1.  `backend/requirements.txt` 添加 `bleach` 库用于HTML净化。
        2.  `backend/app/attractions_bp.py` 新增 `POST /api/attractions/<id>/images` 接口，处理图片上传，保存到景点目录并返回URL。
        3.  `backend/app/attractions_bp.py` 修改 `PUT /api/attractions/<id>` 接口，在保存前对 `description` 和 `description_en` 字段进行HTML净化。
    *   **前端:**
        1.  `frontend/package.json` 添加 `@tiptap/vue-3`, `@tiptap/starter-kit`, `@tiptap/extension-image` 依赖。
        2.  创建 `frontend/src/components/RichTextEditor.vue` 组件，封装 Tiptap 编辑器，包含工具栏和图片上传逻辑。
        3.  `frontend/src/views/AttractionForm.vue` 替换 `<textarea>` 为 `RichTextEditor` 组件，并调整数据绑定。
        4.  `frontend/src/views/AttractionDetailPage.vue` 移除 `marked` 库，直接使用 `v-html` 渲染HTML内容。
    *   **[修复] 富文本编辑器图片上传问题:**
        1.  **问题:** 点击“Add Image”按钮时，意外触发父表单提交，导致图片上传失败。
        2.  **原因:** `RichTextEditor.vue` 中的按钮默认 `type="submit"`。
        3.  **解决:** 将 `RichTextEditor.vue` 中所有工具栏按钮的 `type` 属性明确设置为 `"button"`。
        4.  **问题:** 新建景点时，`attractionId` 为 `0`，导致图片上传接口调用失败。
        5.  **解决:** 在 `RichTextEditor.vue` 中，当 `attractionId` 为 `0` 时，禁用“Add Image”按钮，提示用户先保存景点。
    *   **结果:** 管理系统现在拥有一个功能完善的富文本编辑器，支持图片上传，并解决了相关交互问题。

*   **[改进] 管理系统景点主图片编辑功能:**
    *   **目标:** 允许用户在景点编辑页面直接上传和修改景点的主图片。
    *   **前端:**
        1.  创建 `frontend/src/components/SingleImageUpload.vue` 组件，用于处理单个图片的上传和预览。
        2.  修改 `frontend/src/views/AttractionForm.vue`，引入 `SingleImageUpload` 组件，并用它替换原有的 `image_url` 输入框。
        3.  调整 `AttractionForm.vue` 中 `attraction` 对象的初始化，确保 `image_url` 字段能正确绑定和更新。
    *   **后端:** 复用已有的 `POST /api/attractions/<id>/images` 接口进行图片上传。
    *   **结果:** 管理员现在可以方便地为每个景点上传和更新主图片。

*   **[改进] 管理系统美化与密码保护:**
    *   **目标:** 美化后台管理面板 (`/admin`) 并为其添加密码保护。
    *   **前端:**
        1.  **美化 `AdminDashboard.vue`:** 调整布局和样式，使其更具现代感和专业性。
        2.  **登录页面:** 创建 `frontend/src/views/LoginPage.vue`，提供用户名和密码输入。
        3.  **路由守卫:** 修改 `frontend/src/router/index.js`，添加 `/login` 路由，并实现全局导航守卫，保护所有 `/admin` 路径，未登录用户将重定向到登录页。
        4.  **登出功能:** 修改 `frontend/src/App.vue`，添加一个在登录状态下显示的“登出”按钮，并实现清除登录状态的逻辑。
    *   **后端:**
        1.  **认证蓝图:** 创建 `backend/app/auth_bp.py`，实现 `POST /api/login` 接口，用于验证用户名和密码（硬编码为 `admin`/`password`）。
        2.  **注册蓝图:** 在 `backend/app/__init__.py` 中注册 `auth_bp` 蓝图。
    *   **结果:** 管理后台现在拥有更美观的界面，并通过用户名 `admin` 和密码 `password` 实现了基本的访问控制。

---

**日期:** 2025年10月21日
**阶段:** 地图功能集成与调试

*   **[功能] 实现景点详情页地图展示:**
    *   **目标:** 在景点详情页显示该景点的地理位置。
    *   **方案:** 采用“输入地址，自动转换坐标”的方案，提升后台易用性。
    *   **后端:**
        1.  为景点数据模型添加 `address` 和 `location` 字段。
        2.  为 `requirements.txt` 添加 `requests` 依赖。
        3.  改造 `attractions_bp.py`，在创建和更新景点时，调用高德地理编码API，根据 `address` 自动生成 `location` 坐标并一同存储。
    *   **前端:**
        1.  创建 `MapViewer.vue` 组件，用于封装高德地图的显示逻辑。
        2.  改造 `AttractionForm.vue`（管理员表单），将经纬度输入改为地址输入。
        3.  改造 `AttractionDetailPage.vue`（用户详情页），引入地图组件，并根据景点的 `location` 数据显示标记。

*   **[功能] 实现路线详情页地图路径展示:**
    *   **目标:** 在路线详情页的地图上，绘制出连接该路线所有景点的路径。
    *   **前端:**
        1.  升级 `MapViewer.vue` 组件，使其能接收一个坐标点数组（waypoints），并调用高德驾车路线规划插件来绘制路径。
        2.  改造 `RouteDetailPage.vue`，在页面加载时，提取路线中所有景点的坐标，传递给地图组件进行显示。
        3.  调整了 `RouteDetailPage.vue` 的页面布局，将地图和景点信息分左右两栏显示，优化了视觉效果。

*   **[调试] 解决地图功能系列问题:**
    *   **问题1:** 后台编辑景点时，出现 `Unexpected token '<'` 错误。
    *   **原因:** 之前误删了 `attractions_bp.py` 中的 `import os`，导致处理 `PUT` 请求时后端崩溃并返回HTML错误页。
    *   **解决:** 重新添加 `import os`。
    *   **问题2:** 后端地理编码失败，错误码为 `USERKEY_PLAT_NOMATCH`。
    *   **原因:** 用于后端的API Key没有开通“Web服务”权限。
    *   **解决:** 指导用户申请了新的“Web服务”类型的Key，并更新到后端代码中。
    *   **问题3:** 路线详情页地图显示在北京，且不绘制路线，错误码为 `INVALID_USER_SCODE`。
    *   **原因:** 前端JS API Key缺少安全密钥（jscode）的配置，导致路线规划等高级服务调用失败。
    *   **解决:** 指导用户获取 `securityJsCode`，并将其配置到 `index.html` 中，问题解决。

*   **[测试] 新增景点与路线:**
    *   通过API成功添加了“外滩”和“豫园”两个新景点，验证了地址->坐标的自动转换功能。
    *   通过API成功添加了“上海经典一日游”和“黄浦江畔红色漫步”两条新路线，验证了路线创建功能。

---

**日期:** 2025年10月28日
**阶段:** 修复与功能开发

*   **[修复] 景点详情页地图无法显示标记:**
    *   **问题:** 用户报告景点详情页的地图无法正确显示位置标记。
    *   **原因:** `AttractionDetailPage.vue` 向 `MapViewer.vue` 组件传递了独立的 `latitude` 和 `longitude` 属性，但 `MapViewer.vue` 只设计为接收一个 `waypoints` 数组作为属性。这种不匹配导致坐标数据未能被地图组件正确解析。
    *   **解决:** 重构了 `MapViewer.vue` 组件。修改了其 `props` 定义，使其同时接受 `latitude`/`longitude` 和 `waypoints` 数组。在组件内部，通过 `watch` 监听所有这些可能的属性，并将它们统一处理成一个标准化的坐标点数组。这样，无论数据是以单个坐标还是以数组形式传入，组件都能正确显示标记或路径，解决了详情页的地图显示问题，同时保持了路线页功能的兼容性。

*   **[功能] 完成“个性化定制”页面开发 (端到端):**
    *   **目标:** 实现一个允许用户通过选择兴趣标签和景点来动态生成专属路线的完整功能。
    *   **前端 (UI/UX):**
        1.  在 `PersonalizationPage.vue` 中创建了一个多步骤的用户界面，包括“兴趣选择”、“景点选择”和“结果展示”三个阶段。
        2.  升级了 `MapViewer.vue` 组件，为其增加了交互模式。在该模式下，地图标记会根据“选中”状态改变样式，并且可以响应用户的点击事件 (`@marker-click`)。
        3.  在“景点选择”步骤中，实现了景点列表和地图标记之间的双向数据绑定，用户在任一处的操作都会实时同步到另一处。
        4.  为“生成路线”按钮增加了“至少选择两个景点”的禁用条件，并添加了相应的提示信息，优化了用户体验。
    *   **后端 (API):**
        1.  在 `routes_bp.py` 中新增了 `POST /api/routes/generate` 接口。
        2.  实现了基于 Haversine 公式的地理距离计算函数。
        3.  实现了“最近邻”算法，用于根据用户选择的景点ID列表，计算出访问顺序最优（总距离较短）的路线。
    *   **前端 (结果展示):**
        1.  实现了 `handleGenerateRoute` 函数，用于调用后端API并获取生成的路线数据。
        2.  在“结果展示”步骤中，调用 `MapViewer.vue` 的路线规划功能，在地图上绘制出完整的推荐路线轨迹，并在旁边按顺序列出景点。
    *   **[修复] 路线地图无法绘制:**
        *   **问题:** 在结果页面，地图无法正确绘制生成的路线。
        *   **原因:** `MapViewer.vue` 在解析传入的景点数据时，错误地试图从根对象 (`p.longitude`) 读取坐标，而正确的坐标数据位于嵌套的 `p.location.longitude` 中。
        *   **解决:** 修改了 `MapViewer.vue` 的数据处理逻辑，使其能够智能判断数据结构，无论是嵌套的 `location` 对象还是根级的坐标属性都能正确解析，确保了组件在所有场景下的兼容性和稳定性。
    *   **结果:** 成功交付了一个从前端交互到后端智能生成，再到前端结果展示的完整闭环功能。